package cps161_FinalProject;
import java.util.Random;

public class FunkyBoard {
    private char[][] board;
    private int boardSize;

    public FunkyBoard(int boardSize) {
        this.boardSize = boardSize;
        this.board = new char[boardSize][boardSize];
        initializeBoard();
    }

    public int getBoardSize() {
        return boardSize;
    }

    public char[][] getBoard() {
        return board;
    }

    private void initializeBoard() {
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                board[i][j] = '-';
            }
        }
    }

    public void placeToken(char token, int x, int y) {
        if (x >= 0 && x < boardSize && y >= 0 && y < boardSize) {
            board[x][y] = token;
        }
    }

    public boolean isValidMove(int x, int y) {
        return x >= 0 && x < boardSize && y >= 0 && y < boardSize && board[x][y] == '-';
    }

    public void updateTokenPosition(char token, int currentX, int currentY, int newX, int newY) {
        board[currentX][currentY] = '-';
        board[newX][newY] = token;
    }

    public FunkyToken getWinner() {
        FunkyToken lastToken = null;

        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                if (board[i][j] != '-') {
                    if (lastToken == null) {
                        lastToken = new FunkyToken(board[i][j]) {
                            @Override
                            public void move(FunkyBoard board) {
                                // Empty move implementation for winner
                            }
                        };
                    } else if (lastToken.getToken() != board[i][j]) {
                        return null; // Multiple tokens found, game still in progress
                    }
                }
            }
        }

        return lastToken; // Only one token left, this token is the winner
    }

    public void displayBoard() {
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}
