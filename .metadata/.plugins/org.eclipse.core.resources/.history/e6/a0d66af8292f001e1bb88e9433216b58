package cps161_FinalProject;
import java.util.Arrays;
import java.util.Random;

public class FunkyBoard {
    private char[][] tokens;
    private int boardSize;

    public FunkyBoard(int boardSize) {
        this.boardSize = boardSize;
        tokens = new char[boardSize][boardSize];
        initializeTokens();
    }

    private void initializeTokens() {
        Random random = new Random();
        char[] tokenTypes = {'@', '$', '&'};

        for (char[] row : tokens) {
            Arrays.fill(row, '-');
        }

        for (char token : tokenTypes) {
            int x = random.nextInt(boardSize);
            int y = random.nextInt(boardSize);
            tokens[x][y] = token;
        }
    }

    public void displayBoard() {
        for (char[] row : tokens) {
            for (char token : row) {
                System.out.print(token + " ");
            }
            System.out.println();
        }
    }

    public boolean moveToken(FunkyToken token, int newX, int newY) {
        int currentX = token.getStartX();
        int currentY = token.getStartY();

        if (newX < 0 || newX >= boardSize || newY < 0 || newY >= boardSize) {
            return false; // Invalid move
        }

        if (tokens[newX][newY] == '-') {
            tokens[newX][newY] = token.getToken();
            tokens[currentX][currentY] = '-'; // Free the previous spot
            token.setStartX(newX);
            token.setStartY(newY);
            return true; // Successfully moved
        } else if (tokens[newX][newY] == token.getToken()) {
            // Token already owns the spot, no change needed
            return true; // Successfully moved
        } else {
            // Another token owns the spot, take over the spot
            tokens[newX][newY] = token.getToken();
            tokens[currentX][currentY] = '-'; // Free the previous spot

            // Remove the other token from the board if it has no more spots
            FunkyToken otherToken = findTokenAtPosition(newX, newY);

