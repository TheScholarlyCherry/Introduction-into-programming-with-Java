package cps161_FinalProject;

public class FunkyBoard {
    private char[][] board;
    private int boardSize;

    public FunkyBoard(int size) {
        boardSize = size;
        board = new char[boardSize][boardSize];
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                board[i][j] = '-';
            }
        }
    }

    public void displayBoard() {
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    public void placeToken(char token, int x, int y) {
        if (x >= 0 && x < boardSize && y >= 0 && y < boardSize) {
            board[x][y] = token;
        }
    }

    public boolean isValidMove(int x, int y) {
        return x >= 0 && x < boardSize && y >= 0 && y < boardSize && board[x][y] == '-';
    }

    public int getBoardSize() {
        return boardSize;
    }

    public int getTokenXPosition(FunkyToken token) {
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                if (board[i][j] == token.getToken()) {
                    return i;
                }
            }
        }
        return -1; // Token not found on the board
    }

    public int getTokenYPosition(FunkyToken token) {
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                if (board[i][j] == token.getToken()) {
                    return j;
                }
            }
        }
        return -1; // Token not found on the board
    }

    public void updateTokenPosition(char token, int currentX, int currentY, int newX, int newY) {
        if (isValidMove(newX, newY)) {
            board[newX][newY] = token;
            board[currentX][currentY] = '-';
        }
    }

    public FunkyToken getWinner() {
        FunkyToken winner = null;
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                char currentToken = board[i][j];
                if (currentToken != '-') {
                    boolean isWinner = true;
                    for (int k = 0; k < boardSize; k++) {
                        if (board[i][k] != currentToken || board[k][j] != currentToken) {
                            isWinner = false;
                            break;
                        }
                    }
                    if (isWinner) {
                        if (winner == null) {
                            winner = new FunkyToken(currentToken) {
                                @Override
                                public void move(FunkyBoard board) {
                                    // Empty implementation as the winner does not move anymore
                                }
                            };
                        } else {
                            // There are multiple winners, the game continues
                            return null;
                        }
                    }
                }
            }
        }
        return winner;
    }
}
