package cps161_FinalProject;
import java.util.Arrays;
import java.util.Random;

public class FunkyBoard {
    private char[][] tokens;
    private int boardSize;

    public FunkyBoard(int boardSize) {
        this.boardSize = boardSize;
        tokens = new char[boardSize][boardSize];
        for (char[] row : tokens) {
            Arrays.fill(row, '-');
        }
    }

    public int getBoardSize() {
        return boardSize;
    }

    public boolean isCellEmpty(int x, int y) {
        return tokens[x][y] == '-';
    }

    public char getCellToken(int x, int y) {
        return tokens[x][y];
    }

    public void placeToken(FunkyToken token, int x, int y) {
        tokens[x][y] = token.getToken();
    }

    public void moveToken(FunkyToken token, int x, int y) {
        int startX = -1, startY = -1;

        // Find the token's current position
        outer:
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                if (tokens[i][j] == token.getToken()) {
                    startX = i;
                    startY = j;
                    break outer;
                }
            }
        }

        // Move the token
        if (startX != -1 && startY != -1) {
            tokens[startX][startY] = '-';
            tokens[x][y] = token.getToken();
        }
    }

    public void displayBoard() {
        for (char[] row : tokens) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public FunkyToken getWinner() {
        FunkyToken winner = null;
        for (int i = 0; i < boardSize; i++) {
            for (int j = 0; j < boardSize; j++) {
                char token = tokens[i][j];
                if (token != '-' && winner == null) {
                    winner = new FunkyToken(token) {
                        @Override
                        public void move(FunkyBoard board) {
                            // Empty method (won't be used)
                        }
                    };
                } else if (token != '-' && token != winner.getToken()) {
                    return null; // Game is still ongoing, multiple tokens exist
                }
            }
        }
        return winner;
    }
}